/*
* generated by Xtext
*/
grammar InternalMyDiag;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package diagnosis.it3.mydsl.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package diagnosis.it3.mydsl.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import diagnosis.it3.mydsl.services.MyDiagGrammarAccess;

}

@parser::members {
 
 	private MyDiagGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(MyDiagGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRulediagnosis
entryRulediagnosis 
:
{ before(grammarAccess.getDiagnosisRule()); }
	 rulediagnosis
{ after(grammarAccess.getDiagnosisRule()); } 
	 EOF 
;

// Rule diagnosis
rulediagnosis
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDiagnosisAccess().getGroup()); }
(rule__Diagnosis__Group__0)
{ after(grammarAccess.getDiagnosisAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulepatientData
entryRulepatientData 
:
{ before(grammarAccess.getPatientDataRule()); }
	 rulepatientData
{ after(grammarAccess.getPatientDataRule()); } 
	 EOF 
;

// Rule patientData
rulepatientData
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPatientDataAccess().getGroup()); }
(rule__PatientData__Group__0)
{ after(grammarAccess.getPatientDataAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulevariations
entryRulevariations 
:
{ before(grammarAccess.getVariationsRule()); }
	 rulevariations
{ after(grammarAccess.getVariationsRule()); } 
	 EOF 
;

// Rule variations
rulevariations
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVariationsAccess().getGroup()); }
(rule__Variations__Group__0)
{ after(grammarAccess.getVariationsAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleseveralPatients
entryRuleseveralPatients 
:
{ before(grammarAccess.getSeveralPatientsRule()); }
	 ruleseveralPatients
{ after(grammarAccess.getSeveralPatientsRule()); } 
	 EOF 
;

// Rule severalPatients
ruleseveralPatients
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSeveralPatientsAccess().getGroup()); }
(rule__SeveralPatients__Group__0)
{ after(grammarAccess.getSeveralPatientsAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulevcf
entryRulevcf 
:
{ before(grammarAccess.getVcfRule()); }
	 rulevcf
{ after(grammarAccess.getVcfRule()); } 
	 EOF 
;

// Rule vcf
rulevcf
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getVcfAccess().getGroup()); }
(rule__Vcf__Group__0)
{ after(grammarAccess.getVcfAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleanalysis
entryRuleanalysis 
:
{ before(grammarAccess.getAnalysisRule()); }
	 ruleanalysis
{ after(grammarAccess.getAnalysisRule()); } 
	 EOF 
;

// Rule analysis
ruleanalysis
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAnalysisAccess().getAlternatives()); }
(rule__Analysis__Alternatives)
{ after(grammarAccess.getAnalysisAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleannotation
entryRuleannotation 
:
{ before(grammarAccess.getAnnotationRule()); }
	 ruleannotation
{ after(grammarAccess.getAnnotationRule()); } 
	 EOF 
;

// Rule annotation
ruleannotation
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAnnotationAccess().getGroup()); }
(rule__Annotation__Group__0)
{ after(grammarAccess.getAnnotationAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulehgvsA
entryRulehgvsA 
:
{ before(grammarAccess.getHgvsARule()); }
	 rulehgvsA
{ after(grammarAccess.getHgvsARule()); } 
	 EOF 
;

// Rule hgvsA
rulehgvsA
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getHgvsAAccess().getGroup()); }
(rule__HgvsA__Group__0)
{ after(grammarAccess.getHgvsAAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulegeneA
entryRulegeneA 
:
{ before(grammarAccess.getGeneARule()); }
	 rulegeneA
{ after(grammarAccess.getGeneARule()); } 
	 EOF 
;

// Rule geneA
rulegeneA
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getGeneAAccess().getGroup()); }
(rule__GeneA__Group__0)
{ after(grammarAccess.getGeneAAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuletranscriptA
entryRuletranscriptA 
:
{ before(grammarAccess.getTranscriptARule()); }
	 ruletranscriptA
{ after(grammarAccess.getTranscriptARule()); } 
	 EOF 
;

// Rule transcriptA
ruletranscriptA
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTranscriptAAccess().getGroup()); }
(rule__TranscriptA__Group__0)
{ after(grammarAccess.getTranscriptAAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulepredictionA
entryRulepredictionA 
:
{ before(grammarAccess.getPredictionARule()); }
	 rulepredictionA
{ after(grammarAccess.getPredictionARule()); } 
	 EOF 
;

// Rule predictionA
rulepredictionA
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPredictionAAccess().getAlgorithmAssignment()); }
(rule__PredictionA__AlgorithmAssignment)
{ after(grammarAccess.getPredictionAAccess().getAlgorithmAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulersIdA
entryRulersIdA 
:
{ before(grammarAccess.getRsIdARule()); }
	 rulersIdA
{ after(grammarAccess.getRsIdARule()); } 
	 EOF 
;

// Rule rsIdA
rulersIdA
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRsIdAAccess().getGroup()); }
(rule__RsIdA__Group__0)
{ after(grammarAccess.getRsIdAAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulemafA
entryRulemafA 
:
{ before(grammarAccess.getMafARule()); }
	 rulemafA
{ after(grammarAccess.getMafARule()); } 
	 EOF 
;

// Rule mafA
rulemafA
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMafAAccess().getGroup()); }
(rule__MafA__Group__0)
{ after(grammarAccess.getMafAAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulesearch
entryRulesearch 
:
{ before(grammarAccess.getSearchRule()); }
	 rulesearch
{ after(grammarAccess.getSearchRule()); } 
	 EOF 
;

// Rule search
rulesearch
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getSearchAccess().getAlternatives()); }
(rule__Search__Alternatives)
{ after(grammarAccess.getSearchAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulehgvsS
entryRulehgvsS 
:
{ before(grammarAccess.getHgvsSRule()); }
	 rulehgvsS
{ after(grammarAccess.getHgvsSRule()); } 
	 EOF 
;

// Rule hgvsS
rulehgvsS
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getHgvsSAccess().getGroup()); }
(rule__HgvsS__Group__0)
{ after(grammarAccess.getHgvsSAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulednaS
entryRulednaS 
:
{ before(grammarAccess.getDnaSRule()); }
	 rulednaS
{ after(grammarAccess.getDnaSRule()); } 
	 EOF 
;

// Rule dnaS
rulednaS
    @init {
		int stackSize = keepStackSize();
    }
	:
(
(
{ before(grammarAccess.getDnaSAccess().getHgvsdnaAssignment()); }
(rule__DnaS__HgvsdnaAssignment)
{ after(grammarAccess.getDnaSAccess().getHgvsdnaAssignment()); }
)
(
{ before(grammarAccess.getDnaSAccess().getHgvsdnaAssignment()); }
(rule__DnaS__HgvsdnaAssignment)*
{ after(grammarAccess.getDnaSAccess().getHgvsdnaAssignment()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulecodingS
entryRulecodingS 
:
{ before(grammarAccess.getCodingSRule()); }
	 rulecodingS
{ after(grammarAccess.getCodingSRule()); } 
	 EOF 
;

// Rule codingS
rulecodingS
    @init {
		int stackSize = keepStackSize();
    }
	:
(
(
{ before(grammarAccess.getCodingSAccess().getHgvscodingAssignment()); }
(rule__CodingS__HgvscodingAssignment)
{ after(grammarAccess.getCodingSAccess().getHgvscodingAssignment()); }
)
(
{ before(grammarAccess.getCodingSAccess().getHgvscodingAssignment()); }
(rule__CodingS__HgvscodingAssignment)*
{ after(grammarAccess.getCodingSAccess().getHgvscodingAssignment()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleproteinS
entryRuleproteinS 
:
{ before(grammarAccess.getProteinSRule()); }
	 ruleproteinS
{ after(grammarAccess.getProteinSRule()); } 
	 EOF 
;

// Rule proteinS
ruleproteinS
    @init {
		int stackSize = keepStackSize();
    }
	:
(
(
{ before(grammarAccess.getProteinSAccess().getHgvsproteinAssignment()); }
(rule__ProteinS__HgvsproteinAssignment)
{ after(grammarAccess.getProteinSAccess().getHgvsproteinAssignment()); }
)
(
{ before(grammarAccess.getProteinSAccess().getHgvsproteinAssignment()); }
(rule__ProteinS__HgvsproteinAssignment)*
{ after(grammarAccess.getProteinSAccess().getHgvsproteinAssignment()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulegeneF
entryRulegeneF 
:
{ before(grammarAccess.getGeneFRule()); }
	 rulegeneF
{ after(grammarAccess.getGeneFRule()); } 
	 EOF 
;

// Rule geneF
rulegeneF
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getGeneFAccess().getGroup()); }
(rule__GeneF__Group__0)
{ after(grammarAccess.getGeneFAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulepredictionF
entryRulepredictionF 
:
{ before(grammarAccess.getPredictionFRule()); }
	 rulepredictionF
{ after(grammarAccess.getPredictionFRule()); } 
	 EOF 
;

// Rule predictionF
rulepredictionF
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPredictionFAccess().getAlternatives()); }
(rule__PredictionF__Alternatives)
{ after(grammarAccess.getPredictionFAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulemafF
entryRulemafF 
:
{ before(grammarAccess.getMafFRule()); }
	 rulemafF
{ after(grammarAccess.getMafFRule()); } 
	 EOF 
;

// Rule mafF
rulemafF
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMafFAccess().getGroup()); }
(rule__MafF__Group__0)
{ after(grammarAccess.getMafFAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleeffectF
entryRuleeffectF 
:
{ before(grammarAccess.getEffectFRule()); }
	 ruleeffectF
{ after(grammarAccess.getEffectFRule()); } 
	 EOF 
;

// Rule effectF
ruleeffectF
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEffectFAccess().getGroup()); }
(rule__EffectF__Group__0)
{ after(grammarAccess.getEffectFAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulescoreF
entryRulescoreF 
:
{ before(grammarAccess.getScoreFRule()); }
	 rulescoreF
{ after(grammarAccess.getScoreFRule()); } 
	 EOF 
;

// Rule scoreF
rulescoreF
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getScoreFAccess().getGroup()); }
(rule__ScoreF__Group__0)
{ after(grammarAccess.getScoreFAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleorder
entryRuleorder 
:
{ before(grammarAccess.getOrderRule()); }
	 ruleorder
{ after(grammarAccess.getOrderRule()); } 
	 EOF 
;

// Rule order
ruleorder
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getOrderAccess().getCriteriaAssignment()); }
(rule__Order__CriteriaAssignment)
{ after(grammarAccess.getOrderAccess().getCriteriaAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulereport
entryRulereport 
:
{ before(grammarAccess.getReportRule()); }
	 rulereport
{ after(grammarAccess.getReportRule()); } 
	 EOF 
;

// Rule report
rulereport
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getReportAccess().getGroup()); }
(rule__Report__Group__0)
{ after(grammarAccess.getReportAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulereportVariations
entryRulereportVariations 
:
{ before(grammarAccess.getReportVariationsRule()); }
	 rulereportVariations
{ after(grammarAccess.getReportVariationsRule()); } 
	 EOF 
;

// Rule reportVariations
rulereportVariations
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getReportVariationsAccess().getGroup()); }
(rule__ReportVariations__Group__0)
{ after(grammarAccess.getReportVariationsAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulehgvsR
entryRulehgvsR 
:
{ before(grammarAccess.getHgvsRRule()); }
	 rulehgvsR
{ after(grammarAccess.getHgvsRRule()); } 
	 EOF 
;

// Rule hgvsR
rulehgvsR
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getHgvsRAccess().getGroup()); }
(rule__HgvsR__Group__0)
{ after(grammarAccess.getHgvsRAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulegeneR
entryRulegeneR 
:
{ before(grammarAccess.getGeneRRule()); }
	 rulegeneR
{ after(grammarAccess.getGeneRRule()); } 
	 EOF 
;

// Rule geneR
rulegeneR
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getGeneRAccess().getGroup()); }
(rule__GeneR__Group__0)
{ after(grammarAccess.getGeneRAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulersIdR
entryRulersIdR 
:
{ before(grammarAccess.getRsIdRRule()); }
	 rulersIdR
{ after(grammarAccess.getRsIdRRule()); } 
	 EOF 
;

// Rule rsIdR
rulersIdR
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRsIdRAccess().getGroup()); }
(rule__RsIdR__Group__0)
{ after(grammarAccess.getRsIdRAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuletranscriptR
entryRuletranscriptR 
:
{ before(grammarAccess.getTranscriptRRule()); }
	 ruletranscriptR
{ after(grammarAccess.getTranscriptRRule()); } 
	 EOF 
;

// Rule transcriptR
ruletranscriptR
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getTranscriptRAccess().getGroup()); }
(rule__TranscriptR__Group__0)
{ after(grammarAccess.getTranscriptRAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulepredictionR
entryRulepredictionR 
:
{ before(grammarAccess.getPredictionRRule()); }
	 rulepredictionR
{ after(grammarAccess.getPredictionRRule()); } 
	 EOF 
;

// Rule predictionR
rulepredictionR
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPredictionRAccess().getAlgorithmAssignment()); }
(rule__PredictionR__AlgorithmAssignment)
{ after(grammarAccess.getPredictionRAccess().getAlgorithmAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulemafR
entryRulemafR 
:
{ before(grammarAccess.getMafRRule()); }
	 rulemafR
{ after(grammarAccess.getMafRRule()); } 
	 EOF 
;

// Rule mafR
rulemafR
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getMafRAccess().getGroup()); }
(rule__MafR__Group__0)
{ after(grammarAccess.getMafRAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuledisease
entryRuledisease 
:
{ before(grammarAccess.getDiseaseRule()); }
	 ruledisease
{ after(grammarAccess.getDiseaseRule()); } 
	 EOF 
;

// Rule disease
ruledisease
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDiseaseAccess().getNameAssignment()); }
(rule__Disease__NameAssignment)
{ after(grammarAccess.getDiseaseAccess().getNameAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuledataFile
entryRuledataFile 
:
{ before(grammarAccess.getDataFileRule()); }
	 ruledataFile
{ after(grammarAccess.getDataFileRule()); } 
	 EOF 
;

// Rule dataFile
ruledataFile
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDataFileAccess().getGroup()); }
(rule__DataFile__Group__0)
{ after(grammarAccess.getDataFileAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulehgvsdna
entryRulehgvsdna 
:
{ before(grammarAccess.getHgvsdnaRule()); }
	 rulehgvsdna
{ after(grammarAccess.getHgvsdnaRule()); } 
	 EOF 
;

// Rule hgvsdna
rulehgvsdna
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getHgvsdnaAccess().getGroup()); }
(rule__Hgvsdna__Group__0)
{ after(grammarAccess.getHgvsdnaAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulehgvscoding
entryRulehgvscoding 
:
{ before(grammarAccess.getHgvscodingRule()); }
	 rulehgvscoding
{ after(grammarAccess.getHgvscodingRule()); } 
	 EOF 
;

// Rule hgvscoding
rulehgvscoding
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getHgvscodingAccess().getGroup()); }
(rule__Hgvscoding__Group__0)
{ after(grammarAccess.getHgvscodingAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulehgvsprotein
entryRulehgvsprotein 
:
{ before(grammarAccess.getHgvsproteinRule()); }
	 rulehgvsprotein
{ after(grammarAccess.getHgvsproteinRule()); } 
	 EOF 
;

// Rule hgvsprotein
rulehgvsprotein
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getHgvsproteinAccess().getGroup()); }
(rule__Hgvsprotein__Group__0)
{ after(grammarAccess.getHgvsproteinAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulegene
entryRulegene 
:
{ before(grammarAccess.getGeneRule()); }
	 rulegene
{ after(grammarAccess.getGeneRule()); } 
	 EOF 
;

// Rule gene
rulegene
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getGeneAccess().getHgncIdAssignment()); }
(rule__Gene__HgncIdAssignment)
{ after(grammarAccess.getGeneAccess().getHgncIdAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulerefSeqReference
entryRulerefSeqReference 
:
{ before(grammarAccess.getRefSeqReferenceRule()); }
	 rulerefSeqReference
{ after(grammarAccess.getRefSeqReferenceRule()); } 
	 EOF 
;

// Rule refSeqReference
rulerefSeqReference
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getRefSeqReferenceAccess().getIdentifierAssignment()); }
(rule__RefSeqReference__IdentifierAssignment)
{ after(grammarAccess.getRefSeqReferenceAccess().getIdentifierAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRuleEString
entryRuleEString 
:
{ before(grammarAccess.getEStringRule()); }
	 ruleEString
{ after(grammarAccess.getEStringRule()); } 
	 EOF 
;

// Rule EString
ruleEString
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEStringAccess().getAlternatives()); }
(rule__EString__Alternatives)
{ after(grammarAccess.getEStringAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}





// Entry rule entryRuleEDouble
entryRuleEDouble 
:
{ before(grammarAccess.getEDoubleRule()); }
	 ruleEDouble
{ after(grammarAccess.getEDoubleRule()); } 
	 EOF 
;

// Rule EDouble
ruleEDouble
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getEDoubleAccess().getGroup()); }
(rule__EDouble__Group__0)
{ after(grammarAccess.getEDoubleAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




// Rule predictionAlgorithm
rulepredictionAlgorithm
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPredictionAlgorithmAccess().getAlternatives()); }
(rule__PredictionAlgorithm__Alternatives)
{ after(grammarAccess.getPredictionAlgorithmAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule orderCriteria
ruleorderCriteria
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrderCriteriaAccess().getAlternatives()); }
(rule__OrderCriteria__Alternatives)
{ after(grammarAccess.getOrderCriteriaAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Rule effectEnum
ruleeffectEnum
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEffectEnumAccess().getAlternatives()); }
(rule__EffectEnum__Alternatives)
{ after(grammarAccess.getEffectEnumAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Analysis__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnalysisAccess().getAnnotationParserRuleCall_0()); }
	ruleannotation
{ after(grammarAccess.getAnalysisAccess().getAnnotationParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getAnalysisAccess().getSearchParserRuleCall_1()); }
	rulesearch
{ after(grammarAccess.getAnalysisAccess().getSearchParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__Alternatives_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationAccess().getHgvsAssignment_4_0()); }
(rule__Annotation__HgvsAssignment_4_0)
{ after(grammarAccess.getAnnotationAccess().getHgvsAssignment_4_0()); }
)

    |(
{ before(grammarAccess.getAnnotationAccess().getGeneAssignment_4_1()); }
(rule__Annotation__GeneAssignment_4_1)
{ after(grammarAccess.getAnnotationAccess().getGeneAssignment_4_1()); }
)

    |(
{ before(grammarAccess.getAnnotationAccess().getRsIdAssignment_4_2()); }
(rule__Annotation__RsIdAssignment_4_2)
{ after(grammarAccess.getAnnotationAccess().getRsIdAssignment_4_2()); }
)

    |(
{ before(grammarAccess.getAnnotationAccess().getTranscriptAssignment_4_3()); }
(rule__Annotation__TranscriptAssignment_4_3)
{ after(grammarAccess.getAnnotationAccess().getTranscriptAssignment_4_3()); }
)

    |(
{ before(grammarAccess.getAnnotationAccess().getPredictionAssignment_4_4()); }
(rule__Annotation__PredictionAssignment_4_4)
{ after(grammarAccess.getAnnotationAccess().getPredictionAssignment_4_4()); }
)

    |(
{ before(grammarAccess.getAnnotationAccess().getMafAssignment_4_5()); }
(rule__Annotation__MafAssignment_4_5)
{ after(grammarAccess.getAnnotationAccess().getMafAssignment_4_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Search__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSearchAccess().getHgvsSParserRuleCall_0()); }
	rulehgvsS
{ after(grammarAccess.getSearchAccess().getHgvsSParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getSearchAccess().getGroup_1()); }
(rule__Search__Group_1__0)
{ after(grammarAccess.getSearchAccess().getGroup_1()); }
)

    |(
{ before(grammarAccess.getSearchAccess().getGroup_2()); }
(rule__Search__Group_2__0)
{ after(grammarAccess.getSearchAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Search__Alternatives_1_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSearchAccess().getGeneFParserRuleCall_1_3_0()); }
	rulegeneF
{ after(grammarAccess.getSearchAccess().getGeneFParserRuleCall_1_3_0()); }
)

    |(
{ before(grammarAccess.getSearchAccess().getPredictionFParserRuleCall_1_3_1()); }
	rulepredictionF
{ after(grammarAccess.getSearchAccess().getPredictionFParserRuleCall_1_3_1()); }
)

    |(
{ before(grammarAccess.getSearchAccess().getMafFParserRuleCall_1_3_2()); }
	rulemafF
{ after(grammarAccess.getSearchAccess().getMafFParserRuleCall_1_3_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Search__Alternatives_2_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSearchAccess().getGeneFParserRuleCall_2_3_0()); }
	rulegeneF
{ after(grammarAccess.getSearchAccess().getGeneFParserRuleCall_2_3_0()); }
)

    |(
{ before(grammarAccess.getSearchAccess().getPredictionFParserRuleCall_2_3_1()); }
	rulepredictionF
{ after(grammarAccess.getSearchAccess().getPredictionFParserRuleCall_2_3_1()); }
)

    |(
{ before(grammarAccess.getSearchAccess().getMafFParserRuleCall_2_3_2()); }
	rulemafF
{ after(grammarAccess.getSearchAccess().getMafFParserRuleCall_2_3_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__HgvsS__Alternatives_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHgvsSAccess().getDnaSParserRuleCall_2_0()); }
	rulednaS
{ after(grammarAccess.getHgvsSAccess().getDnaSParserRuleCall_2_0()); }
)

    |(
{ before(grammarAccess.getHgvsSAccess().getCodingSParserRuleCall_2_1()); }
	rulecodingS
{ after(grammarAccess.getHgvsSAccess().getCodingSParserRuleCall_2_1()); }
)

    |(
{ before(grammarAccess.getHgvsSAccess().getProteinSParserRuleCall_2_2()); }
	ruleproteinS
{ after(grammarAccess.getHgvsSAccess().getProteinSParserRuleCall_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PredictionF__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPredictionFAccess().getEffectFParserRuleCall_0()); }
	ruleeffectF
{ after(grammarAccess.getPredictionFAccess().getEffectFParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getPredictionFAccess().getScoreFParserRuleCall_1()); }
	rulescoreF
{ after(grammarAccess.getPredictionFAccess().getScoreFParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ReportVariations__Alternatives_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReportVariationsAccess().getHgvsAssignment_3_0()); }
(rule__ReportVariations__HgvsAssignment_3_0)
{ after(grammarAccess.getReportVariationsAccess().getHgvsAssignment_3_0()); }
)

    |(
{ before(grammarAccess.getReportVariationsAccess().getGeneAssignment_3_1()); }
(rule__ReportVariations__GeneAssignment_3_1)
{ after(grammarAccess.getReportVariationsAccess().getGeneAssignment_3_1()); }
)

    |(
{ before(grammarAccess.getReportVariationsAccess().getRsIdAssignment_3_2()); }
(rule__ReportVariations__RsIdAssignment_3_2)
{ after(grammarAccess.getReportVariationsAccess().getRsIdAssignment_3_2()); }
)

    |(
{ before(grammarAccess.getReportVariationsAccess().getTranscriptAssignment_3_3()); }
(rule__ReportVariations__TranscriptAssignment_3_3)
{ after(grammarAccess.getReportVariationsAccess().getTranscriptAssignment_3_3()); }
)

    |(
{ before(grammarAccess.getReportVariationsAccess().getPredictionAssignment_3_4()); }
(rule__ReportVariations__PredictionAssignment_3_4)
{ after(grammarAccess.getReportVariationsAccess().getPredictionAssignment_3_4()); }
)

    |(
{ before(grammarAccess.getReportVariationsAccess().getMafAssignment_3_5()); }
(rule__ReportVariations__MafAssignment_3_5)
{ after(grammarAccess.getReportVariationsAccess().getMafAssignment_3_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DataFile__Alternatives_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataFileAccess().getDynamicAssignment_2_0()); }
(rule__DataFile__DynamicAssignment_2_0)
{ after(grammarAccess.getDataFileAccess().getDynamicAssignment_2_0()); }
)

    |(
{ before(grammarAccess.getDataFileAccess().getPathAssignment_2_1()); }
(rule__DataFile__PathAssignment_2_1)
{ after(grammarAccess.getDataFileAccess().getPathAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Gene__HgncIdAlternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGeneAccess().getHgncIdEStringParserRuleCall_0_0()); }
	ruleEString
{ after(grammarAccess.getGeneAccess().getHgncIdEStringParserRuleCall_0_0()); }
)

    |(
{ before(grammarAccess.getGeneAccess().getHgncIdHGNCGENETerminalRuleCall_0_1()); }
	RULE_HGNCGENE
{ after(grammarAccess.getGeneAccess().getHgncIdHGNCGENETerminalRuleCall_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RefSeqReference__IdentifierAlternatives_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRefSeqReferenceAccess().getIdentifierREFSEQTerminalRuleCall_0_0()); }
	RULE_REFSEQ
{ after(grammarAccess.getRefSeqReferenceAccess().getIdentifierREFSEQTerminalRuleCall_0_0()); }
)

    |(
{ before(grammarAccess.getRefSeqReferenceAccess().getIdentifierASSEMBLYTerminalRuleCall_0_1()); }
	RULE_ASSEMBLY
{ after(grammarAccess.getRefSeqReferenceAccess().getIdentifierASSEMBLYTerminalRuleCall_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EString__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
	RULE_STRING
{ after(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
)

    |(
{ before(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); }
	RULE_ID
{ after(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PredictionAlgorithm__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPredictionAlgorithmAccess().getSiftEnumLiteralDeclaration_0()); }
(	'Sift' 
)
{ after(grammarAccess.getPredictionAlgorithmAccess().getSiftEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getPredictionAlgorithmAccess().getPolyphenEnumLiteralDeclaration_1()); }
(	'Polyphen' 
)
{ after(grammarAccess.getPredictionAlgorithmAccess().getPolyphenEnumLiteralDeclaration_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__OrderCriteria__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrderCriteriaAccess().getAlphAscEnumLiteralDeclaration_0()); }
(	'AlphAsc' 
)
{ after(grammarAccess.getOrderCriteriaAccess().getAlphAscEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getOrderCriteriaAccess().getAlphDesEnumLiteralDeclaration_1()); }
(	'AlphDes' 
)
{ after(grammarAccess.getOrderCriteriaAccess().getAlphDesEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getOrderCriteriaAccess().getMax2MinEnumLiteralDeclaration_2()); }
(	'Max2Min' 
)
{ after(grammarAccess.getOrderCriteriaAccess().getMax2MinEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getOrderCriteriaAccess().getMin2MaxEnumLiteralDeclaration_3()); }
(	'Min2Max' 
)
{ after(grammarAccess.getOrderCriteriaAccess().getMin2MaxEnumLiteralDeclaration_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EffectEnum__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEffectEnumAccess().getToleratedEnumLiteralDeclaration_0()); }
(	'tolerated' 
)
{ after(grammarAccess.getEffectEnumAccess().getToleratedEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getEffectEnumAccess().getDeleteriousEnumLiteralDeclaration_1()); }
(	'deleterious' 
)
{ after(grammarAccess.getEffectEnumAccess().getDeleteriousEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getEffectEnumAccess().getBenignEnumLiteralDeclaration_2()); }
(	'benign' 
)
{ after(grammarAccess.getEffectEnumAccess().getBenignEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getEffectEnumAccess().getDamagingEnumLiteralDeclaration_3()); }
(	'damaging' 
)
{ after(grammarAccess.getEffectEnumAccess().getDamagingEnumLiteralDeclaration_3()); }
)

    |(
{ before(grammarAccess.getEffectEnumAccess().getProbablyDEnumLiteralDeclaration_4()); }
(	'probably damaging' 
)
{ after(grammarAccess.getEffectEnumAccess().getProbablyDEnumLiteralDeclaration_4()); }
)

    |(
{ before(grammarAccess.getEffectEnumAccess().getPossiblyDEnumLiteralDeclaration_5()); }
(	'possibly damaging' 
)
{ after(grammarAccess.getEffectEnumAccess().getPossiblyDEnumLiteralDeclaration_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Diagnosis__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Diagnosis__Group__0__Impl
	rule__Diagnosis__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Diagnosis__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDiagnosisAccess().getFindKeyword_0()); }

	'Find' 

{ after(grammarAccess.getDiagnosisAccess().getFindKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Diagnosis__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Diagnosis__Group__1__Impl
	rule__Diagnosis__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Diagnosis__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDiagnosisAccess().getPutativeVariantsForKeyword_1()); }

	'putative variants for' 

{ after(grammarAccess.getDiagnosisAccess().getPutativeVariantsForKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Diagnosis__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Diagnosis__Group__2__Impl
	rule__Diagnosis__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Diagnosis__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDiagnosisAccess().getDiseaseAssignment_2()); }
(rule__Diagnosis__DiseaseAssignment_2)
{ after(grammarAccess.getDiagnosisAccess().getDiseaseAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Diagnosis__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Diagnosis__Group__3__Impl
	rule__Diagnosis__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Diagnosis__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDiagnosisAccess().getPatientDataAssignment_3()); }
(rule__Diagnosis__PatientDataAssignment_3)
{ after(grammarAccess.getDiagnosisAccess().getPatientDataAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Diagnosis__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Diagnosis__Group__4__Impl
	rule__Diagnosis__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Diagnosis__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getDiagnosisAccess().getAnalysesAssignment_4()); }
(rule__Diagnosis__AnalysesAssignment_4)
{ after(grammarAccess.getDiagnosisAccess().getAnalysesAssignment_4()); }
)
(
{ before(grammarAccess.getDiagnosisAccess().getAnalysesAssignment_4()); }
(rule__Diagnosis__AnalysesAssignment_4)*
{ after(grammarAccess.getDiagnosisAccess().getAnalysesAssignment_4()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Diagnosis__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Diagnosis__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Diagnosis__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDiagnosisAccess().getReportAssignment_5()); }
(rule__Diagnosis__ReportAssignment_5)
{ after(grammarAccess.getDiagnosisAccess().getReportAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__PatientData__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PatientData__Group__0__Impl
	rule__PatientData__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PatientData__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPatientDataAccess().getReadKeyword_0()); }

	'Read' 

{ after(grammarAccess.getPatientDataAccess().getReadKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__PatientData__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__PatientData__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PatientData__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPatientDataAccess().getVariationsAssignment_1()); }
(rule__PatientData__VariationsAssignment_1)
{ after(grammarAccess.getPatientDataAccess().getVariationsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Variations__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Variations__Group__0__Impl
	rule__Variations__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Variations__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariationsAccess().getVariationsKeyword_0()); }

	'variations' 

{ after(grammarAccess.getVariationsAccess().getVariationsKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Variations__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Variations__Group__1__Impl
	rule__Variations__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Variations__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariationsAccess().getSeveralAssignment_1()); }
(rule__Variations__SeveralAssignment_1)?
{ after(grammarAccess.getVariationsAccess().getSeveralAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Variations__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Variations__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Variations__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariationsAccess().getFormatAssignment_2()); }
(rule__Variations__FormatAssignment_2)
{ after(grammarAccess.getVariationsAccess().getFormatAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__SeveralPatients__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SeveralPatients__Group__0__Impl
	rule__SeveralPatients__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SeveralPatients__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSeveralPatientsAccess().getGenotypesKeyword_0()); }

	'genotypes' 

{ after(grammarAccess.getSeveralPatientsAccess().getGenotypesKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__SeveralPatients__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__SeveralPatients__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SeveralPatients__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSeveralPatientsAccess().getSeveralPatientsAction_1()); }
(

)
{ after(grammarAccess.getSeveralPatientsAccess().getSeveralPatientsAction_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Vcf__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Vcf__Group__0__Impl
	rule__Vcf__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Vcf__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVcfAccess().getFromKeyword_0()); }

	'from' 

{ after(grammarAccess.getVcfAccess().getFromKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Vcf__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Vcf__Group__1__Impl
	rule__Vcf__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Vcf__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVcfAccess().getAVCFFileKeyword_1()); }

	'a VCF file' 

{ after(grammarAccess.getVcfAccess().getAVCFFileKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Vcf__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Vcf__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Vcf__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVcfAccess().getDatafileAssignment_2()); }
(rule__Vcf__DatafileAssignment_2)
{ after(grammarAccess.getVcfAccess().getDatafileAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Annotation__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Annotation__Group__0__Impl
	rule__Annotation__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationAccess().getAnnotateKeyword_0()); }

	'Annotate' 

{ after(grammarAccess.getAnnotationAccess().getAnnotateKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Annotation__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Annotation__Group__1__Impl
	rule__Annotation__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationAccess().getVariationsKeyword_1()); }

	'variations' 

{ after(grammarAccess.getAnnotationAccess().getVariationsKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Annotation__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Annotation__Group__2__Impl
	rule__Annotation__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationAccess().getWithKeyword_2()); }

	'with' 

{ after(grammarAccess.getAnnotationAccess().getWithKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Annotation__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Annotation__Group__3__Impl
	rule__Annotation__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationAccess().getAnnotationAction_3()); }
(

)
{ after(grammarAccess.getAnnotationAccess().getAnnotationAction_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Annotation__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Annotation__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getAnnotationAccess().getAlternatives_4()); }
(rule__Annotation__Alternatives_4)
{ after(grammarAccess.getAnnotationAccess().getAlternatives_4()); }
)
(
{ before(grammarAccess.getAnnotationAccess().getAlternatives_4()); }
(rule__Annotation__Alternatives_4)*
{ after(grammarAccess.getAnnotationAccess().getAlternatives_4()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}












rule__HgvsA__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__HgvsA__Group__0__Impl
	rule__HgvsA__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__HgvsA__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHgvsAAccess().getHgvsKeyword_0()); }

	'hgvs' 

{ after(grammarAccess.getHgvsAAccess().getHgvsKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__HgvsA__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__HgvsA__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__HgvsA__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHgvsAAccess().getHgvsAAction_1()); }
(

)
{ after(grammarAccess.getHgvsAAccess().getHgvsAAction_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__GeneA__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GeneA__Group__0__Impl
	rule__GeneA__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GeneA__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGeneAAccess().getGeneKeyword_0()); }

	'gene' 

{ after(grammarAccess.getGeneAAccess().getGeneKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GeneA__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GeneA__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GeneA__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGeneAAccess().getGeneAAction_1()); }
(

)
{ after(grammarAccess.getGeneAAccess().getGeneAAction_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TranscriptA__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TranscriptA__Group__0__Impl
	rule__TranscriptA__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TranscriptA__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTranscriptAAccess().getTranscriptKeyword_0()); }

	'transcript' 

{ after(grammarAccess.getTranscriptAAccess().getTranscriptKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TranscriptA__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TranscriptA__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TranscriptA__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTranscriptAAccess().getTranscriptAAction_1()); }
(

)
{ after(grammarAccess.getTranscriptAAccess().getTranscriptAAction_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RsIdA__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RsIdA__Group__0__Impl
	rule__RsIdA__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RsIdA__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRsIdAAccess().getRsIdKeyword_0()); }

	'rsId' 

{ after(grammarAccess.getRsIdAAccess().getRsIdKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RsIdA__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RsIdA__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RsIdA__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRsIdAAccess().getRsIdAAction_1()); }
(

)
{ after(grammarAccess.getRsIdAAccess().getRsIdAAction_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MafA__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MafA__Group__0__Impl
	rule__MafA__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MafA__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMafAAccess().getSamplesMafKeyword_0()); }

	'samples maf' 

{ after(grammarAccess.getMafAAccess().getSamplesMafKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MafA__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MafA__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MafA__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMafAAccess().getMAFAAction_1()); }
(

)
{ after(grammarAccess.getMafAAccess().getMAFAAction_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Search__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Search__Group_1__0__Impl
	rule__Search__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Search__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSearchAccess().getFilterKeyword_1_0()); }

	'Filter' 

{ after(grammarAccess.getSearchAccess().getFilterKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Search__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Search__Group_1__1__Impl
	rule__Search__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Search__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSearchAccess().getVariationsKeyword_1_1()); }

	'variations' 

{ after(grammarAccess.getSearchAccess().getVariationsKeyword_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Search__Group_1__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Search__Group_1__2__Impl
	rule__Search__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Search__Group_1__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSearchAccess().getByKeyword_1_2()); }

	'by' 

{ after(grammarAccess.getSearchAccess().getByKeyword_1_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Search__Group_1__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Search__Group_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Search__Group_1__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSearchAccess().getAlternatives_1_3()); }
(rule__Search__Alternatives_1_3)
{ after(grammarAccess.getSearchAccess().getAlternatives_1_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Search__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Search__Group_2__0__Impl
	rule__Search__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Search__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSearchAccess().getPrioritizeKeyword_2_0()); }

	'Prioritize' 

{ after(grammarAccess.getSearchAccess().getPrioritizeKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Search__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Search__Group_2__1__Impl
	rule__Search__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Search__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSearchAccess().getVariationsKeyword_2_1()); }

	'variations' 

{ after(grammarAccess.getSearchAccess().getVariationsKeyword_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Search__Group_2__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Search__Group_2__2__Impl
	rule__Search__Group_2__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Search__Group_2__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSearchAccess().getByKeyword_2_2()); }

	'by' 

{ after(grammarAccess.getSearchAccess().getByKeyword_2_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Search__Group_2__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Search__Group_2__3__Impl
	rule__Search__Group_2__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Search__Group_2__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSearchAccess().getAlternatives_2_3()); }
(rule__Search__Alternatives_2_3)
{ after(grammarAccess.getSearchAccess().getAlternatives_2_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Search__Group_2__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Search__Group_2__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Search__Group_2__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSearchAccess().getOrderAssignment_2_4()); }
(rule__Search__OrderAssignment_2_4)
{ after(grammarAccess.getSearchAccess().getOrderAssignment_2_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__HgvsS__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__HgvsS__Group__0__Impl
	rule__HgvsS__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__HgvsS__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHgvsSAccess().getSearchKeyword_0()); }

	'Search' 

{ after(grammarAccess.getHgvsSAccess().getSearchKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__HgvsS__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__HgvsS__Group__1__Impl
	rule__HgvsS__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__HgvsS__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHgvsSAccess().getVariationsKeyword_1()); }

	'variations' 

{ after(grammarAccess.getHgvsSAccess().getVariationsKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__HgvsS__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__HgvsS__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__HgvsS__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHgvsSAccess().getAlternatives_2()); }
(rule__HgvsS__Alternatives_2)
{ after(grammarAccess.getHgvsSAccess().getAlternatives_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__GeneF__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GeneF__Group__0__Impl
	rule__GeneF__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GeneF__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGeneFAccess().getGeneKeyword_0()); }

	'gene' 

{ after(grammarAccess.getGeneFAccess().getGeneKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GeneF__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GeneF__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GeneF__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getGeneFAccess().getGeneAssignment_1()); }
(rule__GeneF__GeneAssignment_1)
{ after(grammarAccess.getGeneFAccess().getGeneAssignment_1()); }
)
(
{ before(grammarAccess.getGeneFAccess().getGeneAssignment_1()); }
(rule__GeneF__GeneAssignment_1)*
{ after(grammarAccess.getGeneFAccess().getGeneAssignment_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MafF__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MafF__Group__0__Impl
	rule__MafF__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MafF__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMafFAccess().getSamplesMafKeyword_0()); }

	'samples maf' 

{ after(grammarAccess.getMafFAccess().getSamplesMafKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MafF__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MafF__Group__1__Impl
	rule__MafF__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MafF__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMafFAccess().getLeftSquareBracketKeyword_1()); }

	'[' 

{ after(grammarAccess.getMafFAccess().getLeftSquareBracketKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MafF__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MafF__Group__2__Impl
	rule__MafF__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__MafF__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMafFAccess().getMinValueAssignment_2()); }
(rule__MafF__MinValueAssignment_2)
{ after(grammarAccess.getMafFAccess().getMinValueAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MafF__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MafF__Group__3__Impl
	rule__MafF__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__MafF__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMafFAccess().getCommaKeyword_3()); }

	',' 

{ after(grammarAccess.getMafFAccess().getCommaKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MafF__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MafF__Group__4__Impl
	rule__MafF__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__MafF__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMafFAccess().getMaxValueAssignment_4()); }
(rule__MafF__MaxValueAssignment_4)
{ after(grammarAccess.getMafFAccess().getMaxValueAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MafF__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MafF__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MafF__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMafFAccess().getRightSquareBracketKeyword_5()); }

	']' 

{ after(grammarAccess.getMafFAccess().getRightSquareBracketKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__EffectF__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EffectF__Group__0__Impl
	rule__EffectF__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EffectF__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEffectFAccess().getAlgorithmAssignment_0()); }
(rule__EffectF__AlgorithmAssignment_0)
{ after(grammarAccess.getEffectFAccess().getAlgorithmAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EffectF__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EffectF__Group__1__Impl
	rule__EffectF__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EffectF__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEffectFAccess().getEffectKeyword_1()); }

	'effect' 

{ after(grammarAccess.getEffectFAccess().getEffectKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EffectF__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EffectF__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EffectF__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getEffectFAccess().getEffectAssignment_2()); }
(rule__EffectF__EffectAssignment_2)
{ after(grammarAccess.getEffectFAccess().getEffectAssignment_2()); }
)
(
{ before(grammarAccess.getEffectFAccess().getEffectAssignment_2()); }
(rule__EffectF__EffectAssignment_2)*
{ after(grammarAccess.getEffectFAccess().getEffectAssignment_2()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ScoreF__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ScoreF__Group__0__Impl
	rule__ScoreF__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ScoreF__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScoreFAccess().getAlgorithmAssignment_0()); }
(rule__ScoreF__AlgorithmAssignment_0)
{ after(grammarAccess.getScoreFAccess().getAlgorithmAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ScoreF__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ScoreF__Group__1__Impl
	rule__ScoreF__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ScoreF__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScoreFAccess().getScoreKeyword_1()); }

	'score' 

{ after(grammarAccess.getScoreFAccess().getScoreKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ScoreF__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ScoreF__Group__2__Impl
	rule__ScoreF__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ScoreF__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScoreFAccess().getLeftSquareBracketKeyword_2()); }

	'[' 

{ after(grammarAccess.getScoreFAccess().getLeftSquareBracketKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ScoreF__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ScoreF__Group__3__Impl
	rule__ScoreF__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ScoreF__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScoreFAccess().getMinScoreAssignment_3()); }
(rule__ScoreF__MinScoreAssignment_3)
{ after(grammarAccess.getScoreFAccess().getMinScoreAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ScoreF__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ScoreF__Group__4__Impl
	rule__ScoreF__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ScoreF__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScoreFAccess().getCommaKeyword_4()); }

	',' 

{ after(grammarAccess.getScoreFAccess().getCommaKeyword_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ScoreF__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ScoreF__Group__5__Impl
	rule__ScoreF__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__ScoreF__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScoreFAccess().getMaxScoreAssignment_5()); }
(rule__ScoreF__MaxScoreAssignment_5)
{ after(grammarAccess.getScoreFAccess().getMaxScoreAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ScoreF__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ScoreF__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ScoreF__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScoreFAccess().getRightSquareBracketKeyword_6()); }

	']' 

{ after(grammarAccess.getScoreFAccess().getRightSquareBracketKeyword_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__Report__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Report__Group__0__Impl
	rule__Report__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Report__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReportAccess().getReportKeyword_0()); }

	'Report' 

{ after(grammarAccess.getReportAccess().getReportKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Report__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Report__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Report__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReportAccess().getReportVariationsAssignment_1()); }
(rule__Report__ReportVariationsAssignment_1)
{ after(grammarAccess.getReportAccess().getReportVariationsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ReportVariations__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReportVariations__Group__0__Impl
	rule__ReportVariations__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ReportVariations__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReportVariationsAccess().getVariationsKeyword_0()); }

	'variations' 

{ after(grammarAccess.getReportVariationsAccess().getVariationsKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ReportVariations__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReportVariations__Group__1__Impl
	rule__ReportVariations__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ReportVariations__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReportVariationsAccess().getReportVariationsAction_1()); }
(

)
{ after(grammarAccess.getReportVariationsAccess().getReportVariationsAction_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ReportVariations__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReportVariations__Group__2__Impl
	rule__ReportVariations__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ReportVariations__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReportVariationsAccess().getWithKeyword_2()); }

	'with' 

{ after(grammarAccess.getReportVariationsAccess().getWithKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ReportVariations__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ReportVariations__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ReportVariations__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getReportVariationsAccess().getAlternatives_3()); }
(rule__ReportVariations__Alternatives_3)
{ after(grammarAccess.getReportVariationsAccess().getAlternatives_3()); }
)
(
{ before(grammarAccess.getReportVariationsAccess().getAlternatives_3()); }
(rule__ReportVariations__Alternatives_3)*
{ after(grammarAccess.getReportVariationsAccess().getAlternatives_3()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}










rule__HgvsR__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__HgvsR__Group__0__Impl
	rule__HgvsR__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__HgvsR__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHgvsRAccess().getHgvsKeyword_0()); }

	'hgvs' 

{ after(grammarAccess.getHgvsRAccess().getHgvsKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__HgvsR__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__HgvsR__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__HgvsR__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHgvsRAccess().getHgvsRAction_1()); }
(

)
{ after(grammarAccess.getHgvsRAccess().getHgvsRAction_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__GeneR__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GeneR__Group__0__Impl
	rule__GeneR__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__GeneR__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGeneRAccess().getGeneKeyword_0()); }

	'gene' 

{ after(grammarAccess.getGeneRAccess().getGeneKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__GeneR__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__GeneR__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__GeneR__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGeneRAccess().getGeneRAction_1()); }
(

)
{ after(grammarAccess.getGeneRAccess().getGeneRAction_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__RsIdR__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RsIdR__Group__0__Impl
	rule__RsIdR__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__RsIdR__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRsIdRAccess().getRsIdKeyword_0()); }

	'rsId' 

{ after(grammarAccess.getRsIdRAccess().getRsIdKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__RsIdR__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__RsIdR__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__RsIdR__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRsIdRAccess().getRsIdRAction_1()); }
(

)
{ after(grammarAccess.getRsIdRAccess().getRsIdRAction_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__TranscriptR__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TranscriptR__Group__0__Impl
	rule__TranscriptR__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TranscriptR__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTranscriptRAccess().getTranscriptKeyword_0()); }

	'transcript' 

{ after(grammarAccess.getTranscriptRAccess().getTranscriptKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__TranscriptR__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__TranscriptR__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TranscriptR__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getTranscriptRAccess().getTranscriptRAction_1()); }
(

)
{ after(grammarAccess.getTranscriptRAccess().getTranscriptRAction_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__MafR__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MafR__Group__0__Impl
	rule__MafR__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MafR__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMafRAccess().getSamplesMafKeyword_0()); }

	'samples maf' 

{ after(grammarAccess.getMafRAccess().getSamplesMafKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__MafR__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__MafR__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MafR__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMafRAccess().getMAFRAction_1()); }
(

)
{ after(grammarAccess.getMafRAccess().getMAFRAction_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__DataFile__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataFile__Group__0__Impl
	rule__DataFile__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DataFile__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataFileAccess().getFromKeyword_0()); }

	'from' 

{ after(grammarAccess.getDataFileAccess().getFromKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataFile__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataFile__Group__1__Impl
	rule__DataFile__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DataFile__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataFileAccess().getDataFileAction_1()); }
(

)
{ after(grammarAccess.getDataFileAccess().getDataFileAction_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__DataFile__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__DataFile__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DataFile__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataFileAccess().getAlternatives_2()); }
(rule__DataFile__Alternatives_2)
{ after(grammarAccess.getDataFileAccess().getAlternatives_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Hgvsdna__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Hgvsdna__Group__0__Impl
	rule__Hgvsdna__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Hgvsdna__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHgvsdnaAccess().getReferenceAssignment_0()); }
(rule__Hgvsdna__ReferenceAssignment_0)
{ after(grammarAccess.getHgvsdnaAccess().getReferenceAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Hgvsdna__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Hgvsdna__Group__1__Impl
	rule__Hgvsdna__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Hgvsdna__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHgvsdnaAccess().getColonKeyword_1()); }

	':' 

{ after(grammarAccess.getHgvsdnaAccess().getColonKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Hgvsdna__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Hgvsdna__Group__2__Impl
	rule__Hgvsdna__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Hgvsdna__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHgvsdnaAccess().getGKeyword_2()); }

	'g.' 

{ after(grammarAccess.getHgvsdnaAccess().getGKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Hgvsdna__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Hgvsdna__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Hgvsdna__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHgvsdnaAccess().getDescriptionAssignment_3()); }
(rule__Hgvsdna__DescriptionAssignment_3)
{ after(grammarAccess.getHgvsdnaAccess().getDescriptionAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Hgvscoding__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Hgvscoding__Group__0__Impl
	rule__Hgvscoding__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Hgvscoding__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHgvscodingAccess().getReferenceAssignment_0()); }
(rule__Hgvscoding__ReferenceAssignment_0)
{ after(grammarAccess.getHgvscodingAccess().getReferenceAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Hgvscoding__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Hgvscoding__Group__1__Impl
	rule__Hgvscoding__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Hgvscoding__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHgvscodingAccess().getColonKeyword_1()); }

	':' 

{ after(grammarAccess.getHgvscodingAccess().getColonKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Hgvscoding__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Hgvscoding__Group__2__Impl
	rule__Hgvscoding__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Hgvscoding__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHgvscodingAccess().getCKeyword_2()); }

	'c.' 

{ after(grammarAccess.getHgvscodingAccess().getCKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Hgvscoding__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Hgvscoding__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Hgvscoding__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHgvscodingAccess().getDescriptionAssignment_3()); }
(rule__Hgvscoding__DescriptionAssignment_3)
{ after(grammarAccess.getHgvscodingAccess().getDescriptionAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}










rule__Hgvsprotein__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Hgvsprotein__Group__0__Impl
	rule__Hgvsprotein__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Hgvsprotein__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHgvsproteinAccess().getReferenceAssignment_0()); }
(rule__Hgvsprotein__ReferenceAssignment_0)
{ after(grammarAccess.getHgvsproteinAccess().getReferenceAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Hgvsprotein__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Hgvsprotein__Group__1__Impl
	rule__Hgvsprotein__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Hgvsprotein__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHgvsproteinAccess().getColonKeyword_1()); }

	':' 

{ after(grammarAccess.getHgvsproteinAccess().getColonKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Hgvsprotein__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Hgvsprotein__Group__2__Impl
	rule__Hgvsprotein__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Hgvsprotein__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHgvsproteinAccess().getPKeyword_2()); }

	'p.' 

{ after(grammarAccess.getHgvsproteinAccess().getPKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Hgvsprotein__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Hgvsprotein__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Hgvsprotein__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHgvsproteinAccess().getDescriptionAssignment_3()); }
(rule__Hgvsprotein__DescriptionAssignment_3)
{ after(grammarAccess.getHgvsproteinAccess().getDescriptionAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}











rule__EDouble__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EDouble__Group__0__Impl
	rule__EDouble__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__EDouble__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEDoubleAccess().getHyphenMinusKeyword_0()); }
(
	'-' 
)?
{ after(grammarAccess.getEDoubleAccess().getHyphenMinusKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EDouble__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EDouble__Group__1__Impl
	rule__EDouble__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__EDouble__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEDoubleAccess().getINTTerminalRuleCall_1()); }
	RULE_INT
{ after(grammarAccess.getEDoubleAccess().getINTTerminalRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EDouble__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EDouble__Group__2__Impl
	rule__EDouble__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__EDouble__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEDoubleAccess().getFullStopKeyword_2()); }

	'.' 

{ after(grammarAccess.getEDoubleAccess().getFullStopKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__EDouble__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__EDouble__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__EDouble__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEDoubleAccess().getINTTerminalRuleCall_3()); }
	RULE_INT
{ after(grammarAccess.getEDoubleAccess().getINTTerminalRuleCall_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}











rule__Diagnosis__DiseaseAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDiagnosisAccess().getDiseaseDiseaseParserRuleCall_2_0()); }
	ruledisease{ after(grammarAccess.getDiagnosisAccess().getDiseaseDiseaseParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Diagnosis__PatientDataAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDiagnosisAccess().getPatientDataPatientDataParserRuleCall_3_0()); }
	rulepatientData{ after(grammarAccess.getDiagnosisAccess().getPatientDataPatientDataParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Diagnosis__AnalysesAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDiagnosisAccess().getAnalysesAnalysisParserRuleCall_4_0()); }
	ruleanalysis{ after(grammarAccess.getDiagnosisAccess().getAnalysesAnalysisParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Diagnosis__ReportAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDiagnosisAccess().getReportReportParserRuleCall_5_0()); }
	rulereport{ after(grammarAccess.getDiagnosisAccess().getReportReportParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PatientData__VariationsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPatientDataAccess().getVariationsVariationsParserRuleCall_1_0()); }
	rulevariations{ after(grammarAccess.getPatientDataAccess().getVariationsVariationsParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Variations__SeveralAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariationsAccess().getSeveralSeveralPatientsParserRuleCall_1_0()); }
	ruleseveralPatients{ after(grammarAccess.getVariationsAccess().getSeveralSeveralPatientsParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Variations__FormatAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVariationsAccess().getFormatVcfParserRuleCall_2_0()); }
	rulevcf{ after(grammarAccess.getVariationsAccess().getFormatVcfParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Vcf__DatafileAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getVcfAccess().getDatafileDataFileParserRuleCall_2_0()); }
	ruledataFile{ after(grammarAccess.getVcfAccess().getDatafileDataFileParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__HgvsAssignment_4_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationAccess().getHgvsHgvsAParserRuleCall_4_0_0()); }
	rulehgvsA{ after(grammarAccess.getAnnotationAccess().getHgvsHgvsAParserRuleCall_4_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__GeneAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationAccess().getGeneGeneAParserRuleCall_4_1_0()); }
	rulegeneA{ after(grammarAccess.getAnnotationAccess().getGeneGeneAParserRuleCall_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__RsIdAssignment_4_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationAccess().getRsIdRsIdAParserRuleCall_4_2_0()); }
	rulersIdA{ after(grammarAccess.getAnnotationAccess().getRsIdRsIdAParserRuleCall_4_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__TranscriptAssignment_4_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationAccess().getTranscriptTranscriptAParserRuleCall_4_3_0()); }
	ruletranscriptA{ after(grammarAccess.getAnnotationAccess().getTranscriptTranscriptAParserRuleCall_4_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__PredictionAssignment_4_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationAccess().getPredictionPredictionAParserRuleCall_4_4_0()); }
	rulepredictionA{ after(grammarAccess.getAnnotationAccess().getPredictionPredictionAParserRuleCall_4_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Annotation__MafAssignment_4_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAnnotationAccess().getMafMafAParserRuleCall_4_5_0()); }
	rulemafA{ after(grammarAccess.getAnnotationAccess().getMafMafAParserRuleCall_4_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PredictionA__AlgorithmAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPredictionAAccess().getAlgorithmPredictionAlgorithmEnumRuleCall_0()); }
	rulepredictionAlgorithm{ after(grammarAccess.getPredictionAAccess().getAlgorithmPredictionAlgorithmEnumRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Search__OrderAssignment_2_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getSearchAccess().getOrderOrderParserRuleCall_2_4_0()); }
	ruleorder{ after(grammarAccess.getSearchAccess().getOrderOrderParserRuleCall_2_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DnaS__HgvsdnaAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDnaSAccess().getHgvsdnaHgvsdnaParserRuleCall_0()); }
	rulehgvsdna{ after(grammarAccess.getDnaSAccess().getHgvsdnaHgvsdnaParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__CodingS__HgvscodingAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getCodingSAccess().getHgvscodingHgvscodingParserRuleCall_0()); }
	rulehgvscoding{ after(grammarAccess.getCodingSAccess().getHgvscodingHgvscodingParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ProteinS__HgvsproteinAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getProteinSAccess().getHgvsproteinHgvsproteinParserRuleCall_0()); }
	rulehgvsprotein{ after(grammarAccess.getProteinSAccess().getHgvsproteinHgvsproteinParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__GeneF__GeneAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGeneFAccess().getGeneGeneParserRuleCall_1_0()); }
	rulegene{ after(grammarAccess.getGeneFAccess().getGeneGeneParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MafF__MinValueAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMafFAccess().getMinValueEDoubleParserRuleCall_2_0()); }
	ruleEDouble{ after(grammarAccess.getMafFAccess().getMinValueEDoubleParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__MafF__MaxValueAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getMafFAccess().getMaxValueEDoubleParserRuleCall_4_0()); }
	ruleEDouble{ after(grammarAccess.getMafFAccess().getMaxValueEDoubleParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EffectF__AlgorithmAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEffectFAccess().getAlgorithmPredictionAlgorithmEnumRuleCall_0_0()); }
	rulepredictionAlgorithm{ after(grammarAccess.getEffectFAccess().getAlgorithmPredictionAlgorithmEnumRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__EffectF__EffectAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getEffectFAccess().getEffectEffectEnumEnumRuleCall_2_0()); }
	ruleeffectEnum{ after(grammarAccess.getEffectFAccess().getEffectEffectEnumEnumRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ScoreF__AlgorithmAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScoreFAccess().getAlgorithmPredictionAlgorithmEnumRuleCall_0_0()); }
	rulepredictionAlgorithm{ after(grammarAccess.getScoreFAccess().getAlgorithmPredictionAlgorithmEnumRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ScoreF__MinScoreAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScoreFAccess().getMinScoreEDoubleParserRuleCall_3_0()); }
	ruleEDouble{ after(grammarAccess.getScoreFAccess().getMinScoreEDoubleParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ScoreF__MaxScoreAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getScoreFAccess().getMaxScoreEDoubleParserRuleCall_5_0()); }
	ruleEDouble{ after(grammarAccess.getScoreFAccess().getMaxScoreEDoubleParserRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Order__CriteriaAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOrderAccess().getCriteriaOrderCriteriaEnumRuleCall_0()); }
	ruleorderCriteria{ after(grammarAccess.getOrderAccess().getCriteriaOrderCriteriaEnumRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Report__ReportVariationsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReportAccess().getReportVariationsReportVariationsParserRuleCall_1_0()); }
	rulereportVariations{ after(grammarAccess.getReportAccess().getReportVariationsReportVariationsParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ReportVariations__HgvsAssignment_3_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReportVariationsAccess().getHgvsHgvsRParserRuleCall_3_0_0()); }
	rulehgvsR{ after(grammarAccess.getReportVariationsAccess().getHgvsHgvsRParserRuleCall_3_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ReportVariations__GeneAssignment_3_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReportVariationsAccess().getGeneGeneRParserRuleCall_3_1_0()); }
	rulegeneR{ after(grammarAccess.getReportVariationsAccess().getGeneGeneRParserRuleCall_3_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ReportVariations__RsIdAssignment_3_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReportVariationsAccess().getRsIdRsIdRParserRuleCall_3_2_0()); }
	rulersIdR{ after(grammarAccess.getReportVariationsAccess().getRsIdRsIdRParserRuleCall_3_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ReportVariations__TranscriptAssignment_3_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReportVariationsAccess().getTranscriptTranscriptRParserRuleCall_3_3_0()); }
	ruletranscriptR{ after(grammarAccess.getReportVariationsAccess().getTranscriptTranscriptRParserRuleCall_3_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ReportVariations__PredictionAssignment_3_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReportVariationsAccess().getPredictionPredictionRParserRuleCall_3_4_0()); }
	rulepredictionR{ after(grammarAccess.getReportVariationsAccess().getPredictionPredictionRParserRuleCall_3_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ReportVariations__MafAssignment_3_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReportVariationsAccess().getMafMafRParserRuleCall_3_5_0()); }
	rulemafR{ after(grammarAccess.getReportVariationsAccess().getMafMafRParserRuleCall_3_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__PredictionR__AlgorithmAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPredictionRAccess().getAlgorithmPredictionAlgorithmEnumRuleCall_0()); }
	rulepredictionAlgorithm{ after(grammarAccess.getPredictionRAccess().getAlgorithmPredictionAlgorithmEnumRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Disease__NameAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDiseaseAccess().getNameEStringParserRuleCall_0()); }
	ruleEString{ after(grammarAccess.getDiseaseAccess().getNameEStringParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DataFile__DynamicAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataFileAccess().getDynamicINPUTTerminalRuleCall_2_0_0()); }
	RULE_INPUT{ after(grammarAccess.getDataFileAccess().getDynamicINPUTTerminalRuleCall_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DataFile__PathAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDataFileAccess().getPathEStringParserRuleCall_2_1_0()); }
	ruleEString{ after(grammarAccess.getDataFileAccess().getPathEStringParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Hgvsdna__ReferenceAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHgvsdnaAccess().getReferenceRefSeqReferenceParserRuleCall_0_0()); }
	rulerefSeqReference{ after(grammarAccess.getHgvsdnaAccess().getReferenceRefSeqReferenceParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Hgvsdna__DescriptionAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHgvsdnaAccess().getDescriptionHGVSEXPRTerminalRuleCall_3_0()); }
	RULE_HGVSEXPR{ after(grammarAccess.getHgvsdnaAccess().getDescriptionHGVSEXPRTerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Hgvscoding__ReferenceAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHgvscodingAccess().getReferenceRefSeqReferenceParserRuleCall_0_0()); }
	rulerefSeqReference{ after(grammarAccess.getHgvscodingAccess().getReferenceRefSeqReferenceParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Hgvscoding__DescriptionAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHgvscodingAccess().getDescriptionHGVSEXPRTerminalRuleCall_3_0()); }
	RULE_HGVSEXPR{ after(grammarAccess.getHgvscodingAccess().getDescriptionHGVSEXPRTerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Hgvsprotein__ReferenceAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHgvsproteinAccess().getReferenceRefSeqReferenceParserRuleCall_0_0()); }
	rulerefSeqReference{ after(grammarAccess.getHgvsproteinAccess().getReferenceRefSeqReferenceParserRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Hgvsprotein__DescriptionAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getHgvsproteinAccess().getDescriptionHGVSEXPRTerminalRuleCall_3_0()); }
	RULE_HGVSEXPR{ after(grammarAccess.getHgvsproteinAccess().getDescriptionHGVSEXPRTerminalRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Gene__HgncIdAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getGeneAccess().getHgncIdAlternatives_0()); }
(rule__Gene__HgncIdAlternatives_0)
{ after(grammarAccess.getGeneAccess().getHgncIdAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__RefSeqReference__IdentifierAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getRefSeqReferenceAccess().getIdentifierAlternatives_0()); }
(rule__RefSeqReference__IdentifierAlternatives_0)
{ after(grammarAccess.getRefSeqReferenceAccess().getIdentifierAlternatives_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_HGNCGENE : ('A'..'Z')+ ((('0'..'9')+ ('A'..'Z')+)*|('0'..'9')+);

RULE_INPUT : 'input';

RULE_REFSEQ : 'N' ('C'|'G'|'M'|'P') '_' RULE_INT '.' RULE_INT;

RULE_ASSEMBLY : ('Hg' RULE_INT|'NCBI' RULE_INT);

RULE_HGVSEXPR : (RULE_INT (('+'|'-') RULE_INT)? ('ins'|'del') ('A'|'T'|'G'|'C')+|RULE_INT (('+'|'-') RULE_INT)? ('A'|'T'|'G'|'C')+ '>' ('A'|'T'|'G'|'C')+|('A'..'Z'|'a'..'z')+ RULE_INT ('A'..'Z'|'a'..'z')+);

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


