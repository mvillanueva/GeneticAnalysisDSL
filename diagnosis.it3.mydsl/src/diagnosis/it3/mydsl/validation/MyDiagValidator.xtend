/*
 * generated by Xtext
 */
package diagnosis.it3.mydsl.validation
import org.eclipse.xtext.validation.Check
import diagnosis.Diagnosis
import diagnosis.HgvsS
import diagnosis.Annotation
import diagnosis.GeneF
import diagnosis.PredictionF
import diagnosis.PredictionR
import diagnosis.ScoreF
import diagnosis.MAFF
import diagnosis.MAFR

/**
 * Custom validation rules. 
 *
 * see http://www.eclipse.org/Xtext/documentation.html#validation
 */
class MyDiagValidator extends AbstractMyDiagValidator {

  public static val INVALID_NAME = 'invalidName'

/**-------------------------------------------------FILTERING-------------------------------------------------------------------------------- */
/*Annotate hgvs before searching by hgvs */
@Check
	def checkAnnotateHgvsBeforeSearchingHgvs(Diagnosis diagnosis){
		for(annotation:diagnosis.analyses.filter(Annotation)){
			if(annotation.hgvs==null)//Not annotated with hgvs
				for(search:diagnosis.analyses.filter(HgvsS))//for each search by hgvs
					error('You should annotate the HGVS notation before searching by HGVS',search,null, -1)//show error
		}
		
	}
	
/*Annotate gene before searching by gene */
@Check
	def checkAnnotateGeneBeforeFilteringByGene(Diagnosis diagnosis){
		for(annotation:diagnosis.analyses.filter(Annotation)){
			if(annotation.gene==null)//Not annotated with gene
				for(filter:diagnosis.analyses.filter(GeneF))//for each search by hgvs
					error('You should annotate the gene notation before filtering by gene',filter,null, -1)//show error
		}
		
	}
/*Annotate maf before searching/filtering by maf */
@Check
	def checkAnnotateMAFBeforeFilteringByMAF(Diagnosis diagnosis){
		for(annotation:diagnosis.analyses.filter(Annotation)){
			if(annotation.maf==null)//Not annotated with gene
				for(filter:diagnosis.analyses.filter(MAFF))//for each search by hgvs
					error('You should annotate the maf notation before filtering by maf',filter,null, -1)//show error
		}
		
	}
	
/*Annotate SIFT/POLYPHEN before searching by SIFT/POLYPHEN */
@Check
	def checkAnnotatePredictionBeforeFilteringPrioritizingByPrediction(Diagnosis diagnosis){
		for(annotation:diagnosis.analyses.filter(Annotation)){
			for(filter:diagnosis.analyses.filter(PredictionF)){//for each filter/priorization by Prediction
				if(annotation.prediction==null)//Not annotated with prediction
					error('You should annotate the prediction before filtering/prioritizing by prediction',filter,null, -1)//show error
				else {//if Annotated check that the prediction algorithm
					var annotationFound=0
					for(annotationPred:annotation.prediction){
						if(annotationPred.algorithm.equals(filter.algorithm)){
							annotationFound=1
						}						
					}
					if(annotationFound==0){
						error('You should annotate the prediction before filtering/prioritizing by prediction',filter,null, -1)//show error
					}
				}
			}
		}			
	}
		
/*SIFT/POLYPHEN score filter values between 0 and 1*/
@Check
	def checkPredictionScoreFilterValuesBetween0and1(Diagnosis diagnosis){	
		for(filter:diagnosis.analyses.filter(ScoreF)){
			if(filter.minScore<0 || filter.minScore>1 ||filter.maxScore<0 || filter.maxScore>1)
				error('Prediction score values must be between 0 and 1',filter,null, -1)//show error
		}
	}
/*MAF filter values between 0 and 1*/
@Check
	def checkMAFFilterValuesBetween0and1(Diagnosis diagnosis){	
		for(filter:diagnosis.analyses.filter(MAFF)){
			if(filter.minValue<0 || filter.minValue>1 ||filter.maxValue<0 || filter.maxValue>1)
				error('MAF values must be between 0 and 1',filter,null, -1)//show error
		}
	}

/**-------------------------------------------------REPORTING-------------------------------------------------------------------------------- */	

/*Annotate hgvs before reporting hgvs */
@Check
	def checkAnnotateHgvsBeforeReportingHgvs(Diagnosis diagnosis){
		for(annotation:diagnosis.analyses.filter(Annotation)){
			if(annotation.hgvs==null){//Not annotated with hgvs
				if(diagnosis.report.reportVariations.hgvs!=null) //if report hgvs
					error('You should annotate the HGVS before reporting HGVS',diagnosis.report,null, -1) //show error
			}
		}
	}
	
/*Annotate gene before reporting gene */
@Check
	def checkAnnotateGeneBeforeReportingGene(Diagnosis diagnosis){
		for(annotation:diagnosis.analyses.filter(Annotation)){
			if(annotation.gene==null){//Not annotated with hgvs
				if(diagnosis.report.reportVariations.gene!=null) //if report hgvs
					error('You should annotate the gene before reporting gene',diagnosis.report,null, -1) //show error
			}
		}
	}

/*Annotate rsId before reporting rsId */
@Check
	def checkAnnotateRsIdBeforeReportingRsId(Diagnosis diagnosis){
		for(annotation:diagnosis.analyses.filter(Annotation)){
			if(annotation.rsId==null){//Not annotated with hgvs
				if(diagnosis.report.reportVariations.rsId!=null) //if report hgvs
					error('You should annotate the rsId before reporting rsId',diagnosis.report,null, -1) //show error
			}
		}
	}
	
/*Annotate transcript before reporting transcript */
@Check
	def checkAnnotateTranscriptBeforeReportingTranscript(Diagnosis diagnosis){
		for(annotation:diagnosis.analyses.filter(Annotation)){
			if(annotation.transcript==null){//Not annotated with hgvs
				if(diagnosis.report.reportVariations.transcript!=null) //if report hgvs
					error('You should annotate the transcript before reporting transcript',diagnosis.report,null, -1) //show error
			}
		}
	}
	
/*Annotate prediction before reporting prediction */
@Check
	def checkAnnotatePredictionBeforeReportingPrediction(Diagnosis diagnosis){
		for(annotation:diagnosis.analyses.filter(Annotation)){
			for(filter:diagnosis.report.reportVariations.prediction){//for each filter/priorization by Prediction
				if(annotation.prediction==null)//Not annotated with prediction
					error('You should annotate the prediction before reporting by prediction',filter,null, -1)//show error
				else {//if Annotated check that the prediction algorithm
					var annotationFound=0
					for(annotationPred:annotation.prediction){
						if(annotationPred.algorithm.equals(filter.algorithm)){
							annotationFound=1
						}						
					}
					if(annotationFound==0){
						error('You should annotate the prediction before reporting by prediction',filter,null, -1)//show error
					}
				}
			}
		}		
	}
	
/*Annotate maf before reporting by maf */
@Check
	def checkAnnotateMAFBeforeReportingMAF(Diagnosis diagnosis){
		for(annotation:diagnosis.analyses.filter(Annotation)){
			if(annotation.maf==null){//Not annotated with maf
				if(diagnosis.report.reportVariations.maf!=null) //if report hgvs
					error('You should annotate the maf before reporting the maf',diagnosis.report,null, -1) //show error
			}
		}
	}


}
