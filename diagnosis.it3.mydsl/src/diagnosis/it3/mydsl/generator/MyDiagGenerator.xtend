/*
 * generated by Xtext
 */
package diagnosis.it3.mydsl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IGenerator
import org.eclipse.xtext.generator.IFileSystemAccess

import diagnosis.Disease
import diagnosis.Analysis

import diagnosis.it3.mydsl.generator.analysis.AnalysisGenerator
import diagnosis.it3.mydsl.generator.patientdata.PatientDataGenerator
import diagnosis.PatientData
import diagnosis.it3.mydsl.generator.report.ReportGenerator
import diagnosis.ReportVariations
import diagnosis.it3.mydsl.generator.galaxy.GalaxyHelper

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */

class MyDiagGenerator implements IGenerator {
	
	
	
	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		fsa.generateFile(resource.allContents.toIterable.filter(Disease).get(0).name+'.ga',
			galaxyTemplate(resource) as CharSequence
		)
	}
	
	
	def String galaxyTemplate(Resource resource)'''«
	GalaxyHelper.getGalaxyHelper.resetSteps»«
»	{
	    "a_galaxy_workflow": "true", 
	    "annotation": "", 
	    "format-version": "0.1", 
	    "name": "«resource.allContents.toIterable.filter(Disease).get(0).name»",
	    "steps":{«resource.steps()»
	    }
	}'''
	
	/**
	 * Galaxy Steps
	 */    
	def steps(Resource resource)'''
		«/*PatientData */»
		«var patient=new PatientDataGenerator()»
		«patient.readPatientData(resource.allContents.toIterable.filter(PatientData).get(0))»«//Only one patient at the moment
		
		/*Analyses */»
		«FOR Analysis a:resource.allContents.toIterable.filter(Analysis) SEPARATOR ','»«
			var analysis=new AnalysisGenerator()»«
			analysis.runAnalysis(a)»«
		ENDFOR»
		,«/*Report */»«
		var report=new ReportGenerator()»«
		report.generateReport(resource.allContents.toIterable.filter(ReportVariations).get(0))»'''//Only one reportVariations at the moment
	
}
