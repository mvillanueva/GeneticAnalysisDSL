// automatically generated by Xtext
grammar diagnosis.it3.mydsl.MyDiag with org.eclipse.xtext.common.Terminals

import "diagnosis" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

diagnosis returns Diagnosis:
	'Find' 'putative variants for' disease=disease
	 patientData=patientData
     analyses+=analysis+ 
	 report=report;

/*PATIENT DATA */
patientData returns PatientData:
	'Read' 
	variations=variations;
	
	
variations returns Variations:
	'variations'
	(several=severalPatients)?
	format=vcf;

severalPatients returns SeveralPatients:
	'genotypes'{SeveralPatients};

vcf returns Vcf:
	'from' 'a VCF file'
	datafile=dataFile;

/*ANALYSES */
analysis returns Analysis:
	annotation |
	search;

//Variation Annotation
annotation returns Annotation:
	'Annotate' 'variations'	'with'
	{Annotation}
	(hgvs=hgvsA |gene=geneA| rsId=rsIdA | transcript=transcriptA | prediction+=predictionA | maf=mafA)+;

//Annotation Fields
hgvsA returns HgvsA:
	'hgvs'{HgvsA};
geneA returns GeneA:
	'gene'{GeneA};
transcriptA returns TranscriptA:
	'transcript'{TranscriptA};
predictionA returns PredictionA:
	algorithm=predictionAlgorithm;
rsIdA returns RsIdA:
	'rsId'{RsIdA};
mafA returns MAFA:
	'samples maf'
	{MAFA};
	
	
	
	
//Variations Filter 
search returns Filter:
	hgvsS
	|('Filter' 'variations' 'by' (geneF | predictionF |mafF))
	|('Prioritize' 'variations' 'by' (geneF | predictionF|mafF) order=order);

hgvsS returns HgvsS:
	'Search' 'variations'
	(dnaS|codingS|proteinS);
dnaS returns DnaS:
	hgvsdna+=hgvsdna+;
codingS returns CodingS:
	hgvscoding+=hgvscoding+;
proteinS returns ProteinS:
	hgvsprotein+=hgvsprotein+;
geneF returns GeneF:	
	'gene' gene+=gene+;
predictionF returns PredictionF:	
	effectF|scoreF;
mafF returns MAFF:	
	'samples maf' 
	'['minValue=EDouble','maxValue=EDouble']';	

effectF returns EffectF:
	algorithm=predictionAlgorithm 'effect' 
	effect+=effectEnum+;	

scoreF returns ScoreF:
	algorithm=predictionAlgorithm 'score'
	'['minScore=EDouble','maxScore=EDouble']';	
order returns Order:
	criteria=orderCriteria; 


	

/*REPORT */
report returns Report:
	'Report'
	 reportVariations=reportVariations;	 
reportVariations returns ReportVariations:
	'variations' 
	{ReportVariations}
	'with' (hgvs=hgvsR |gene=geneR| rsId=rsIdR | transcript=transcriptR | prediction+=predictionR | maf=mafR)+;	
hgvsR returns HgvsR:
	'hgvs' {HgvsR}; 
geneR returns GeneR:
	'gene' {GeneR}; 
rsIdR returns RsIdR:
	'rsId' {RsIdR}; 
transcriptR returns TranscriptR:
	'transcript'{TranscriptR};
predictionR returns PredictionR:
	algorithm=predictionAlgorithm;
mafR returns MAFR:
	'samples maf'
	{MAFR};		
	
/*DataModel Types */
disease returns Disease:
	name=EString;
	
dataFile returns DataFile:
	'from'{DataFile}
	(dynamic?=INPUT|path=EString);
	

hgvsdna returns HgvsDna:
	reference=refSeqReference ':''g.'description=HGVSEXPR;	
hgvscoding returns HgvsCoding:
	reference=refSeqReference ':''c.'description=HGVSEXPR;	
hgvsprotein returns HgvsProtein:
	reference=refSeqReference ':''p.'description=HGVSEXPR;
gene returns Gene:
	hgncId=(EString|HGNCGENE);
	
refSeqReference returns RefSeqReference:
	identifier=(REFSEQ|ASSEMBLY);
	

	
/* Data Types ecore */
EBoolean returns ecore::EBoolean:
	'true' | 'false';
EString returns ecore::EString:
	STRING | ID;
EInt returns ecore::EInt:
	'-'? INT;
EDouble returns ecore::EDouble:
	'-'? INT '.' INT;


/*Terminals and Enumerations */
terminal HGNCGENE:
	(('A'..'Z')+ ((('0'..'9')+('A'..'Z')+)* |('0'..'9')+) );
terminal INPUT:
	'input';
terminal REFSEQ:
	'N'('C'|'G'|'M'|'P')'_'	INT'.'INT
;
terminal ASSEMBLY:
	('Hg'INT) |
	('NCBI'INT);
terminal HGVSEXPR:
	(INT(('+'|'-')INT)?('ins'|'del')('A'|'T'|'G'|'C')+)|//ins/del
	(INT(('+'|'-')INT)?('A'|'T'|'G'|'C')+'>'('A'|'T'|'G'|'C')+)|//indel	
	(('A'..'Z'|'a'..'z')+INT('A'..'Z'|'a'..'z')+);//Protein

enum predictionAlgorithm returns PredictionAlgorithm: Sift='Sift' | Polyphen='Polyphen';
enum orderCriteria returns OrderCriteria: AlphAsc='AlphAsc'| AlphDes='AlphDes'| Max2Min='Max2Min' |Min2Max='Min2Max';	
enum effectEnum returns Effect: Tolerated='tolerated'| Deleterious='deleterious' | Benign='benign' | Damaging='damaging'| ProbablyD='probably damaging' |PossiblyD='possibly damaging';	

